/* Copyright 2017 by Aaron Hansen.
 *
 * Permission to use, copy, modify, and/or distribute this software for any purpose with
 * or without fee is hereby granted, provided that the above copyright notice and this
 * permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
 * TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package com.ca.alog;

import java.util.logging.Logger;
import static java.util.logging.Level.*;

/**
 * Logging convenience, enables shorter statements using ternary expressions for
 * efficiency.  Requires Java 8 or later.
 * <p>
 * Without this interface:
 * <p>
 * <code>log.log(FINEST, log.isLoggable(FINEST) ? "complexString" : "");</code>
 * <p>
 * With this interface:
 * <p>
 * <code>finest(logFinest() ? "complexString" : "");</code>
 *
 * @author Aaron Hansen
 */
public interface Alogger {

    public default void config(String msg) {
        getLog().log(CONFIG, msg);
    }

    public default void config(String msg, Object param) {
        getLog().log(CONFIG, msg, param);
    }

    public default void config(String msg, Object[] params) {
        getLog().log(CONFIG, msg, params);
    }

    public default void config(String msg, Throwable x) {
        getLog().log(CONFIG, msg, x);
    }

    public default void fine(String msg) {
        getLog().log(FINE, msg);
    }

    public default void fine(String msg, Object param) {
        getLog().log(FINE, msg, param);
    }

    public default void fine(String msg, Object[] params) {
        getLog().log(FINE, msg, params);
    }

    public default void fine(String msg, Throwable x) {
        getLog().log(FINE, msg, x);
    }

    public default void finer(String msg) {
        getLog().log(FINER, msg);
    }

    public default void finer(String msg, Object param) {
        getLog().log(FINER, msg, param);
    }

    public default void finer(String msg, Object[] params) {
        getLog().log(FINER, msg, params);
    }

    public default void finer(String msg, Throwable x) {
        getLog().log(FINER, msg, x);
    }

    public default void finest(String msg) {
        getLog().log(FINEST, msg);
    }

    public default void finest(String msg, Object param) {
        getLog().log(FINEST, msg, param);
    }

    public default void finest(String msg, Object[] params) {
        getLog().log(FINEST, msg, params);
    }

    public default void finest(String msg, Throwable x) {
        getLog().log(FINEST, msg, x);
    }

    /**
     * Returns the global logger by default, this should be overridden.
     */
    public default Logger getLog() {
        return Logger.getGlobal();
    }

    public default void info(String msg) {
        getLog().log(INFO, msg);
    }

    public default void info(String msg, Object param) {
        getLog().log(INFO, msg, param);
    }

    public default void info(String msg, Object[] params) {
        getLog().log(INFO, msg, params);
    }

    public default void info(String msg, Throwable x) {
        getLog().log(INFO, msg, x);
    }

    public default void severe(String msg) {
        getLog().log(SEVERE, msg);
    }

    public default void severe(String msg, Object param) {
        getLog().log(SEVERE, msg, param);
    }

    public default void severe(String msg, Object[] params) {
        getLog().log(SEVERE, msg, params);
    }

    public default void severe(String msg, Throwable x) {
        getLog().log(SEVERE, msg, x);
    }

    public default void warn(String msg) {
        getLog().log(WARNING, msg);
    }

    public default void warn(String msg, Object param) {
        getLog().log(WARNING, msg, param);
    }

    public default void warn(String msg, Object[] params) {
        getLog().log(WARNING, msg, params);
    }

    public default void warn(String msg, Throwable x) {
        getLog().log(WARNING, msg, x);
    }

    public default boolean logConfig() {
        return getLog().isLoggable(CONFIG);
    }

    public default boolean logFine() {
        return getLog().isLoggable(FINE);
    }

    public default boolean logFiner() {
        return getLog().isLoggable(FINER);
    }

    public default boolean logFinest() {
        return getLog().isLoggable(FINEST);
    }

    public default boolean logInfo() {
        return getLog().isLoggable(INFO);
    }

    public default boolean logSevere() {
        return getLog().isLoggable(SEVERE);
    }

    public default boolean logWarning() {
        return getLog().isLoggable(WARNING);
    }

} //class
